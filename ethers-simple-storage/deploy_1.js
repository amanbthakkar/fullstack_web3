//stopping this code after demonstrating how to send a transaction using ethers as well as pure javascript
//code from here will be continued in deploy_2.js without these comments
//we will use ethers.js method of sending transactions, ie using contractFactory.deploy in further sections

const ethers = require("ethers")
const fs = require("fs")
//async so we can wait for our contracts to be deployed
async function main() {
  // you can compile here and deploy
  // or compile from command line as well, which we will do
  /*
  yarn solcjs --bin --abi --include-path node_modules/ --base-path . -o . SimpleStorage.sol
  u can either install yarn globally or run it from the project folder itself (which contains yarn.lock and all)
  */
  //http://127.0.0.1:7545

  const provider = new ethers.providers.JsonRpcProvider(
    "http://127.0.0.1:8545/"
  )

  const wallet = new ethers.Wallet(
    "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80", //0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
    provider
  )

  console.log("Wallet:" + wallet.address)
  //in order to deply we will need abi and binary of compiled contract
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  )

  //a factory is an object used to deploy contracts
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
  console.log("Deploying...")
  // const contract = await contractFactory.deploy(); //STOP HERE AND WAIT FOR DEPLOY
  // //deploy function returns a promise that resolves to a contract
  // const transactionReceipt = await contract.deployTransaction.wait(1);
  // //wait for one block confirmation - you only get transaction receipt when you wait for a block confirmation
  // console.log("Here is the transaction deployment (transaction response):");
  // console.log(contract.deployTransaction); //this is what you get after deploy command, when contract is returned
  console.log(
    "=============================================================================="
  )
  // console.log("Here is the transaction receipt:");
  // console.log(transactionReceipt);
  console.log(
    "=============================================================================="
  )
  console.log("Now let us deploy with only transaction data now") //refer to above part's output.
  const nonce = await wallet.getTransactionCount()
  const tx = {
    //nonce: 6, //previous was 4, check sample output - OR just query to get past one
    nonce: nonce,
    gasPrice: 20000000000,
    gasLimit: 2500000,
    to: null, //its a contract deployment so
    value: 0,
    data: "0x608060405234801561001057600080fd5b506106ee806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c578063471f7cdf1461007a5780636057361d146100985780636f760f41146100b45780639e7a13ad146100d0575b600080fd5b610064610101565b60405161007191906104a7565b60405180910390f35b61008261010a565b60405161008f91906104a7565b60405180910390f35b6100b260048036038101906100ad91906103ea565b610110565b005b6100ce60048036038101906100c9919061038e565b61011a565b005b6100ea60048036038101906100e591906103ea565b6101aa565b6040516100f89291906104c2565b60405180910390f35b60008054905090565b60005481565b8060008190555050565b60016040518060400160405280838152602001848152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001019080519060200190610180929190610266565b505050806002836040516101949190610490565b9081526020016040518091039020819055505050565b600181815481106101ba57600080fd5b90600052602060002090600202016000915090508060000154908060010180546101e3906105bb565b80601f016020809104026020016040519081016040528092919081815260200182805461020f906105bb565b801561025c5780601f106102315761010080835404028352916020019161025c565b820191906000526020600020905b81548152906001019060200180831161023f57829003601f168201915b5050505050905082565b828054610272906105bb565b90600052602060002090601f01602090048101928261029457600085556102db565b82601f106102ad57805160ff19168380011785556102db565b828001600101855582156102db579182015b828111156102da5782518255916020019190600101906102bf565b5b5090506102e891906102ec565b5090565b5b808211156103055760008160009055506001016102ed565b5090565b600061031c61031784610517565b6104f2565b90508281526020810184848401111561033857610337610681565b5b610343848285610579565b509392505050565b600082601f8301126103605761035f61067c565b5b8135610370848260208601610309565b91505092915050565b600081359050610388816106a1565b92915050565b600080604083850312156103a5576103a461068b565b5b600083013567ffffffffffffffff8111156103c3576103c2610686565b5b6103cf8582860161034b565b92505060206103e085828601610379565b9150509250929050565b600060208284031215610400576103ff61068b565b5b600061040e84828501610379565b91505092915050565b600061042282610548565b61042c8185610553565b935061043c818560208601610588565b61044581610690565b840191505092915050565b600061045b82610548565b6104658185610564565b9350610475818560208601610588565b80840191505092915050565b61048a8161056f565b82525050565b600061049c8284610450565b915081905092915050565b60006020820190506104bc6000830184610481565b92915050565b60006040820190506104d76000830185610481565b81810360208301526104e98184610417565b90509392505050565b60006104fc61050d565b905061050882826105ed565b919050565b6000604051905090565b600067ffffffffffffffff8211156105325761053161064d565b5b61053b82610690565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156105a657808201518184015260208101905061058b565b838111156105b5576000848401525b50505050565b600060028204905060018216806105d357607f821691505b602082108114156105e7576105e661061e565b5b50919050565b6105f682610690565b810181811067ffffffffffffffff821117156106155761061461064d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6106aa8161056f565b81146106b557600080fd5b5056fea26469706673582212201252b40a0d01f1db6c3529704f7f0a97ca554bb61716c51b2fd8a777645bf7c364736f6c63430008070033",
    //0x followed by the binary!
    chainId: 31337,
  }

  // const signedTxResponse = await wallet.signTransaction(tx);
  // console.log(signedTxResponse); //this output is just the signed transaction, we haven't sent it yet so not on blockchain
  // or we can directly send a txn as below

  const sentTxResponse = await wallet.sendTransaction(tx) //first send (code for this includes sign transaction inside itself)
  await sentTxResponse.wait(1)
  console.log("Sent the txn and waited for one block")
  console.log(sentTxResponse)
}

main()
  .then(() => process.exit(0))
  .catch((err) => {
    console.log(err)
    process.exit(1)
  })
